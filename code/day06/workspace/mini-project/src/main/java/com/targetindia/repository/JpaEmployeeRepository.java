package com.targetindia.repository;

import com.targetindia.entity.Employee;
import com.targetindia.utils.JpaUtil;

import javax.persistence.EntityManager;
import javax.persistence.EntityTransaction;
import javax.persistence.NoResultException;
import javax.persistence.TypedQuery;
import java.util.List;

public class JpaEmployeeRepository implements EmployeeRepository {
    @Override
    public Employee insert(Employee employee) throws RepositoryException {
        EntityManager em = null;
        try {
            em = JpaUtil.getEntityManager();
            EntityTransaction tx = em.getTransaction();
            tx.begin();
            try {
                em.persist(employee); // employee.id is null here
                tx.commit();
                return employee; // employee.id is autogenerated from the db
            } catch (Exception ex) {
                tx.rollback();
                throw ex;
            }
        } catch (Exception ex) {
            throw new RepositoryException((ex));
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }

    @Override
    public Employee findById(int id) throws RepositoryException {
        EntityManager em = null;
        try {
            em = JpaUtil.getEntityManager();
            return em.find(Employee.class, id);
        } catch (Exception ex) {
            throw new RepositoryException((ex));
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }

    @Override
    public Employee update(Employee employee) throws RepositoryException {
        EntityManager em = null;
        try {
            em = JpaUtil.getEntityManager();
            EntityTransaction tx = em.getTransaction();
            tx.begin();
            try {
                em.merge(employee); // employee is now a managed object
                tx.commit();
                return employee;
            } catch (Exception ex) {
                tx.rollback();
                throw ex;
            }
        } catch (Exception ex) {
            throw new RepositoryException((ex));
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }

    @Override
    public Employee delete(int id) throws RepositoryException {
        EntityManager em = null;
        try {
            em = JpaUtil.getEntityManager();
            Employee emp = em.find(Employee.class, id);
            if (emp == null) {
                throw new RepositoryException("No data found for id " + id);
            }
            EntityTransaction tx = em.getTransaction();
            tx.begin();
            try {
                em.remove(emp);
                tx.commit(); // emp is now removed from the EntityManager's cache, but will still be there in JVM
                // and an SQL DELETE statement is executed, so that the record is removed the table.
                return emp;
            } catch (Exception ex) {
                tx.rollback();
                throw ex;
            }
        } catch (Exception ex) {
            throw new RepositoryException((ex));
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }

    @Override
    public List<Employee> findAll() throws RepositoryException {
        EntityManager em = null;
        try {
            em = JpaUtil.getEntityManager();
            TypedQuery<Employee> qry = em.createQuery("from Employee", Employee.class);
            return qry.getResultList();
        } catch (Exception ex) {
            throw new RepositoryException((ex));
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }

    @Override
    public Employee findByEmail(String email) throws RepositoryException {
        EntityManager em = null;
        try {
            em = JpaUtil.getEntityManager();
            TypedQuery<Employee> qry = em.createQuery("from Employee where email=?0", Employee.class);
            qry.setParameter(0, email);
            return qry.getSingleResult();
        } catch (NoResultException ex) {
            return null;
        } catch (Exception ex) {
            throw new RepositoryException((ex));
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }

    @Override
    public Employee findByPhone(String phone) throws RepositoryException {
        EntityManager em = null;
        try {
            em = JpaUtil.getEntityManager();
            TypedQuery<Employee> qry = em.createQuery("from Employee where phone=?0", Employee.class);
            qry.setParameter(0, phone);
            return qry.getSingleResult();
        } catch (NoResultException ex) {
            return null;
        } catch (Exception ex) {
            throw new RepositoryException((ex));
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }

    @Override
    public List<Employee> findByLastname(String lastname) throws RepositoryException {
        EntityManager em = null;
        try {
            em = JpaUtil.getEntityManager();
            TypedQuery<Employee> qry = em.createQuery("from Employee where lastname=:LAST_NAME", Employee.class);
            qry.setParameter("LAST_NAME", lastname);
            return qry.getResultList();
        } catch (Exception ex) {
            throw new RepositoryException((ex));
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }

    @Override
    public List<Employee> findBetweenSalary(double min, double max) throws RepositoryException {
        EntityManager em = null;
        try {
            em = JpaUtil.getEntityManager();
            TypedQuery<Employee> qry = em.createQuery("from Employee where salary between ?1 and ?2", Employee.class);
            qry.setParameter(1, min);
            qry.setParameter(2, max);
            return qry.getResultList();
        } catch (Exception ex) {
            throw new RepositoryException((ex));
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }
}
